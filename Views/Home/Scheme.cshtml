@{
    ViewData["Title"] = "Взаємодія";
}

<div class="text-center">
    <h1 class="display-4">Схема взаємодії</h1>
</div>

<p>
    На відміну від offline-програм веб-застосунки орієнтуються на двох розподілених
    учасників взаємодії:<br/>
    Клієнт - браузер (або інша програма), яка взаємодіє з користувачем та 
     формує запит на ресурси сайту<br/>
    Сервер - бекенд, програма або сукупність програм, які обробляють запит
</p>
<ul>
    <li>
        Користувач вводить у браузері URL або натискає на певне посилання.
    </li>
    <li>
        Браузер визначає мережеву адресу сервера (IP) з введеного URL, 
        формує та надсилає НТТР-запит, включаючи усі необхідні дані у нього
        (URL, Cookie, User-Agent, ...)
    </li>
    <li>
        Серверна частина, у більшості випадків, у т.ч. ASP, складається з двох
        "блоків" - веб-сервер та веб-застосунок (application).
        Веб-сервер слухає порт та приймає "сирий" НТТР-запит, розділяє його
        частини: заголовки, тіло, параметри, додані файли, тощо; 
        формує з них зрозумілі для веб-застосунку дані (.NET об'єкти) і передає 
        керування веб-застосунку. Один веб-сервер може обслуговувати декілька
        сайтів (веб-застосунків), у такому разі до задач сервера належить 
        визначення того, якому із застосунків передати керування.
        Для роботи з .NET як правило береться IIS (Microsoft Internet Information
        Server) або похідні від нього
    </li>
    <li>
        Веб-застосунок - це скомпільований код (DLL), який узгоджується із 
        веб-сервером і продовжує оброблення запиту, "розібраного" сервером.
        Процес створення DLL та переміщення її у область видності веб-серверу
        називається Deploy. Процес переміщення свідчить про те, що зміни у 
        коді проєкту не завжди відразу відображаються у браузері, навіть при
        оновлені сторінки. Вони мають увійти у DLL та перемістить (із заміною)
        до веб-сервера (Redeploy)
    </li>
    <li>
        Всередині веб-застосунку відбуваються процеси з різним життєвим циклом (Scope).
        Деякі об'єкти створюються зі стартом застосунку і існують протягом
        всього часу його роботи. Це контекст даних, служби (хешування, 
        випадкових чисел, шифрування). Такі об'єкти називають Singleton.
        Об'єкти контроллерів створюються нові для кожного НТТР-запиту. Це
        пов'язано з вимогами безпеки - якщо об'єкт було побудовано для авторизованого
        користувача, то другий запит від неавторизованого потенційно матиме
        доступ до об'єктів, побудованих для авторизованого користувача.
        Така часова область називається RequestScope.
        Третя група об'єктів кожен раз (при кожному звернені) має утворювати 
        нові екземпляри, наприклад, DateTime, StringBuilder, тощо. Такі об'єкти
        називають Transient
    </li>
    <li>
        Кінець роботи контроллеру передає керування представленню. Це HTML із
        особливим синтаксисом Razor, який дозволяє інжектувати C# код, зокрема
        передавати дані від контроллера. Для цього передбачені два контейнери
        ViewBag (dynamic) та ViewData (Dictionary)<br/>
        ViewBag: <b> @ViewBag.bagdata </b> <br />
        ViewData: <b> @ViewData["viewdata"] </b>
    </li>
    <li>
        Сформований HTML передається до веб-серверу (IIS), який його "упаковує"
        у НТТР-відповідь (response) та надсилає до клієнта.
    </li>
</ul>
<img src="/img/url.webp" />
