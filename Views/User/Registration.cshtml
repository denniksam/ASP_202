@using ASP_202.Models.User
@model UserRegistrationModel
@{
    ViewData["Title"] = "Реєстрація";
    var validationResult = ViewData["validationResult"] as UserValidationModel;
}

<div class="text-center">
    <h1 class="display-4">Реєстрація нового користувача</h1>
</div>

<form method="post" asp-controller="User" asp-action="RegisterUser" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Login">Логін</label>
        <!-- 
            за результатом перевірки кожен input має додати клас is-valid / is-invalid
            validationResult is null - нічого (не було перевірки)
            validationResult.LoginMessage is null - is-valid
            else - is-invalid
        -->
        <input asp-for="Login" type="text"
               class="form-control @(validationResult is null ? "" : (validationResult.LoginMessage is null ? "is-valid" : "is-invalid") ) "
               placeholder="Виберіть собі логін" />
        <!--
            А також додаємо блок з класом invalid-feedback / valid-feedback (опціонально)
            теж за наявності результатів перевірки
        -->
        @if (validationResult?.LoginMessage is not null)
        {
            <div class="invalid-feedback">
                @validationResult.LoginMessage
            </div>
        }
    </div>
    <div class="form-group">
        <label asp-for="Password">Пароль</label>
        <input asp-for="Password" type="password" 
               class="form-control @(validationResult is null ? "" : (validationResult.PasswordMessage is null ? "is-valid" : "is-invalid") ) "
               placeholder="Придумайте пароль" />
        @if (validationResult?.PasswordMessage is not null)
        {
            <div class="invalid-feedback">
                @validationResult.PasswordMessage
            </div>
        }
    </div>
    <div class="form-group">
        <label asp-for="RepeatPassword">Підтвердіть пароль</label>
        <input asp-for="RepeatPassword" type="password"
               class="form-control @(validationResult is null ? "" : (validationResult.RepeatPasswordMessage is null ? "is-valid" : "is-invalid") ) "
               placeholder="Повторіть пароль" />
        @if (validationResult?.RepeatPasswordMessage is not null)
        {
            <div class="invalid-feedback">
                @validationResult.RepeatPasswordMessage
            </div>
        }
    </div>
    <div class="form-group">
        <label asp-for="Email">Email</label>
        <input asp-for="Email" type="email" 
               class="form-control @(validationResult is null ? "" : (validationResult.EmailMessage is null ? "is-valid" : "is-invalid") ) "
               placeholder="Введіть свій E-mail">
        @if (validationResult?.EmailMessage is not null)
        {
            <div class="invalid-feedback">
                @validationResult.EmailMessage
            </div>
        }
        else
        {
            <small class="form-text text-muted">Без вашої згоди E-mail не буде видно для інших користувачів.</small>
        }        
    </div>
    <div class="form-group">
        <label asp-for="RealName">Реальне ім'я</label>
        <input asp-for="RealName" type="text"
               class="form-control @(validationResult is null ? "" : (validationResult.RealNameMessage is null ? "is-valid" : "is-invalid") ) "
               placeholder="Введіть ваше реальне ім'я" />
        @if (validationResult?.RealNameMessage is not null)
        {
            <div class="invalid-feedback">
                @validationResult.RealNameMessage
            </div>
        }
        else
        {
            <small class="form-text text-muted">Без вашої згоди ім'я не буде видно для інших користувачів.</small>
        }
    </div>
    <div class="mb-3">
        <label asp-for="Avatar"
               class="form-label">Виберіть файл для аватарки</label>
        <input asp-for="Avatar"
               class="form-control" type="file" />
    </div>
    <br/>
    <div class="form-check">
        <input asp-for="IsAgree" class="form-check-input">
        <label asp-for="IsAgree" 
               class="form-check-label @(validationResult is null ? "" : (validationResult.IsAgreeMessage is null ? "is-valid" : "is-invalid") )">Даю згоду дотримуватись правил сайту</label>
        @if (validationResult?.IsAgreeMessage is not null)
        {
        <div class="invalid-feedback">
            @validationResult.IsAgreeMessage
        </div>
        }
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Реєстрація</button>
</form>

<hr/>
<h2>Робота з формами</h2>
<p>
    У ASP ідея моделей, як описів комплексних даних, закладається в основу
    організації як самих форм, так і контроллерів, які ці дані обробляють.
    При створенні форми, як правило, все починається з моделі.
</p>
<p>
    Узгодження передачі даних відбувається за іменами: слід дотримуватись
    однакових імен у формі та у контроллері. Для уникнення помилок украй
    рекомендується вживати тег-помічники з атрибутом asp-for.
    Значення атрибуту відповідає полям (властивостям) моделі, покращують
    контроль за помилками. Більш того, цей атрибут автоматично генерує
    id та name для елемента, а також підбирає тип input згідно з типом 
    даних поля моделі. Плюс для полів, які не передають окремі значення,
    наприклад, невідмічені checkbox, створюються приховані поля для 
    передачі значення за замовчанням.
</p>
<p>
    Методи контроллерів можут отримувати дані форм та відразу переносити їх
    у об'єкти-моделі (точніше, створювати об'єкти та заповнювати їх поля).
    Зв'язування здійснюється <u>за збігом імен</u> у класі-моделі та параметрах
    запиту. Це півищує важливість правильного встановлення імен полів форм,
    тобто рекомендує вживати засоби asp-for. Також бажано перевіряти <b>усі</b>
    поля моделі, навіть якщо видно, що деякі проходять нормально.
</p>
<hr/>
<h2>Про форми HTML</h2>
<p>
    Форми - це засіб HTML/браузера для відправлення даних. Можна сказати,
    що форма є розширенням поняття "посилання", яке не тільки переходить
    за новою адресою, а ще й передає на неї певні дані. Аналогічно з посиланнями
    відправлення форми (перехід за посиланням) руйнує сторінку, і нова збирається
    з відповіді сервера.
</p>
<p>
    Як форма передає дані?<br/>
    Особливості передачі даних встановлюються атрибутами тега &lt;form>:<br />
    <b>method</b> - get (default) | post - методи запиту (згідно з 
        <a href="https://www.rfc-editor.org/rfc/rfc7231#page-22">стандартом</a>)<br />
    <b>enctype</b> - application/x-www-form-urlencoded (default) | multipart/form-data <br />
    application/x-www-form-urlencoded == name1=val1&name2=val2&....<br />
    multipart/form-data == зобразити важко - використовується для передачі файлів<br />
    get - запити GET не повинні мати тіло, відповідно дані передаються через URL
     у частині query/params<br />
    post - дані вкладені у тіло запиту. Для того щоб їх переглянути треба відкрити
     консоль браузера, вибрати інструмент "Network", вибрати головний запит (за
     назвою сторінки) та відкрити таб "Payload"<br />
</p>
<hr/>
<h2>Передача файлів</h2>
<p>
    З боку HTML: у формі має бути поле типу "file" та enctype форми 
    <b>обов'язково</b> повинен мати значення "multipart/form-data"
</p>